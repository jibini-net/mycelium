plugins
{
	id 'com.github.kt3k.coveralls' version '2.8.4' apply false
}

allprojects
{
	apply plugin: 'java-library'
	apply plugin: 'jacoco'
	apply plugin: 'com.github.kt3k.coveralls'
	
	sourceCompatibility = '1.8'
	
	repositories
	{
		jcenter()
		
		mavenCentral()
		mavenLocal()
	}
	
	dependencies
	{
		implementation 'org.slf4j:slf4j-api:1.7.30',
				'org.slf4j:slf4j-log4j12:1.7.30',
				
				'org.json:json:20190722'
		
		testImplementation 'junit:junit:4.12'
	}
}

subprojects
{
	jacocoTestReport
	{
		additionalSourceDirs.setFrom(files(sourceSets.main.allSource.srcDirs))
		sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
		classDirectories.setFrom(files(sourceSets.main.output))
		
		reports
		{
			html.enabled = true
			xml.enabled = true
			csv.enabled = false
		}
	}
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport)\
{
	dependsOn = subprojects.test
	
	additionalSourceDirs.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
	sourceDirectories.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
	classDirectories.setFrom(files(subprojects.sourceSets.main.output))
	executionData.setFrom(files(subprojects.jacocoTestReport.executionData))
	
	reports
	{
		html.enabled = true
		xml.enabled = true
		csv.enabled = false
	}
	
	onlyIf = { true }
	
	doFirst
	{
		executionData.setFrom(files(executionData.findAll
				{
					it.exists()
				}))
	}
	
	afterEvaluate
	{
		classDirectories.setFrom(files(classDirectories.files.collect
		{
			fileTree(dir: it,
			exclude: [
						'net/jibini/mycelium/Mycelium*',
						'net/jibini/mycelium/file/TextFileAppender*',
						'net/jibini/mycelium/error/**/*'
					])
		}))
	}
}

coveralls
{
	sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
	jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls
{
	dependsOn jacocoRootReport
	onlyIf { System.env.'CI' && !JavaVersion.current().isJava9Compatible() }
}